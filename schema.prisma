
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and authentication
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  image           String?
  subscriptionTier String   @default("free")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  projects        Project[]
  accounts        Account[]
  sessions        Session[]
}

// NextAuth.js required models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Projects and manuscripts
model Project {
  id                String    @id @default(cuid())
  title             String
  author            String?
  description       String?   @db.Text
  genre             String?
  coverImage        String?
  content           String?   @db.Text
  contentAnalysis   Json?
  aiRecommendations Json?
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  aiAnalyses        AiAnalysis[]
  chapters          Chapter[]
}

// Chapter structure
model Chapter {
  id          String   @id @default(cuid())
  title       String
  content     String?  @db.Text
  orderIndex  Int
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// AI analysis results
model AiAnalysis {
  id             String  @id @default(cuid())
  projectId      String
  analysisType   String
  results        Json
  confidenceScore Float
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
}
